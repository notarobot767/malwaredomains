#! /usr/bin/python3

import requests
import sys, os

#output formats functions
#########################
#how we should format the domains for our needs

def bindFormat(domain):
  location = r'"/app/zone/sinkhole.zone"'
  return 'zone "{0}" {{type master; file {1};}};'.format(domain, location)
  #propery format domains for my bind9 dns setup

#could also use passThrough() function if no formatting desired

#parser functions
#################

#not all online lists are the same format
#some will require different ways to parse the domains
#by passing a parser function in the url_list, our program can pull
  #domains for many sites with diffenet formatting styles

def passThrough(line):
  return line

def someoneWhoCares(line):
  if "0.0.0.0" in line:
    return line.split()[1]
  return ""
  #how to parse
  #https://someonewhocares.org/hosts/zero/hosts

def malwareDomains(line):
  return line.split()[0]
  #how to parse
  #http://mirror1.malwaredomains.com/files/domains.txt

def preCheck(line):
  return len(line) > 0 and line[0] != "#"
  #check non empty and first character is not comment character

def readUrl(url):
  #return text of webpage
  response = requests.get(url)
  if response.status_code == 200:
    #200 response mean okay
    return requests.get(url).text
  #anything other than 200, return empty string
  return ""

def addDomainsToSet(url, ans_set, formatFunction=passThrough):
  url_str, fun = url
  #string url
  #parsing function

  data = readUrl(url_str).split("\n")
  #grab data from url

  for line in data:
    line = line.strip()
    #strip line

    if preCheck(line):
      #run precheck tests

      fun_value = fun(line)
      #get associated function parser output

      if fun_value:
      #parser will return "" if bad line

        origin_out = sys.stdout
        sys.stdout = open(os.devnull, 'w')
        #temporarily change stdout to null for printing

        try:
          print(fun_value)
          #printing seemed only way I know how to trigger the UnicodeEncodeError
          #otherwise prgram would raise error at end

          ans_set.add(formatFunction(fun_value))
          #add domain to set formated with format function

        except UnicodeEncodeError:
          next

        sys.stdout = origin_out
        #revert stdout before returning result

def tldFirst(domain):
  #top level domain
  #used to aide sorting by tld such as .com first
  #opposed to subdomain like google.com
  domain = domain.split(".")
  domain.reverse()
  return ".".join(domain)

def returnDomains(ans_set):
  return "#{0} unique domains\n{1}".format(
    len(ans_set),
    "\n".join(sorted(ans_set, key=tldFirst))
  )

if __name__ == '__main__':
  ans_set = set()
    #mutable set

  ulr_list = [
    #[r"http://malwaredomains.ogrydziak.net", passThrough],
    #[r"http://mirror1.malwaredomains.com/files/domains.txt", malwareDomains]
    [r"https://someonewhocares.org/hosts/zero/hosts", someoneWhoCares],
    [r"https://justdomains.github.io/blocklists/lists/easylist-justdomains.txt", passThrough],
    [r"https://justdomains.github.io/blocklists/lists/easyprivacy-justdomains.txt", passThrough],
    [r"https://justdomains.github.io/blocklists/lists/adguarddns-justdomains.txt", passThrough],
    [r"https://justdomains.github.io/blocklists/lists/nocoin-justdomains.txt", passThrough]
  ]

  for url in ulr_list:
    addDomainsToSet(url, ans_set, bindFormat)
    #url w parser function
    #mutable domain set
    #domain format function (optional)

  print(returnDomains(ans_set))
